; Стековая область
stseg   segment para stack
        dw 16 dup(?)
stseg   ends

; Область данных
dseg    segment para
x           dw  0, 1, 0, 2, 3, 0, 4, 5  ; Массив из 8 чисел
y           dw  ?                       ; Результат – количество нулей
old_address dw  2 dup(?)                ; Сохраняем старый вектор прерывания
dseg    ends

; Кодовая область
code    segment para
        assume cs:code, ds:dseg, ss:stseg

main    proc
        ; Инициализация сегмента данных
        mov     ax, dseg            ; Загружаем адрес сегмента данных
        mov     ds, ax              ; DS указывает на dseg

        ; Сохранение старого вектора прерывания 0FEh
        push    es
        mov     ah, 35h             ; Функция DOS для получения вектора прерывания
        mov     al, 0FEh            ; Номер прерывания 0FEh
        int     21h                 ; Вызов DOS
        mov     word ptr old_address, es    ; Сохраняем сегмент старого обработчика
        mov     word ptr old_address+2, bx  ; Сохраняем смещение старого обработчика

        ; Установка нового обработчика прерывания 0FEh
        push    ds
        mov     dx, offset count_zeros ; Загружаем адрес нового обработчика
        mov     ax, seg count_zeros    ; Загружаем сегмент нового обработчика
        mov     ds, ax                 ; DS = сегмент нового обработчика
        mov     ah, 25h                ; Функция DOS для установки вектора прерывания
        mov     al, 0FEh               ; Номер прерывания 0FEh
        int     21h                  ; Установка нового обработчика
        pop     ds

        ; Передача параметров через регистры:
        ; BX – адрес массива, CX – количество элементов
        mov     bx, offset x         ; BX указывает на начало массива
        mov     cx, 8                ; Количество элементов = 8

        ; Вызываем обработчик прерывания
        int     0FEh               ; Вызов обработчика, результат в AX
        mov     y, ax              ; Сохраняем результат (количество нулей) в переменной y

        ; Восстановление старого вектора прерывания 0FEh
        push    ds
        mov     dx, old_address+2  ; DX = смещение старого обработчика
        mov     ax, word ptr old_address  ; AX = сегмент старого обработчика
        mov     ds, ax             ; DS = сегмент старого обработчика
        mov     ah, 25h            ; Функция DOS для установки вектора прерывания
        mov     al, 0FEh           ; Номер прерывания 0FEh
        int     21h              ; Восстановление старого обработчика
        pop     ds
        pop     es

        ; Завершение работы программы
        mov     ah, 4Ch
        int     21h
main    endp

; Обработчик прерывания (int 0FEh)
; Входные параметры:
; BX - адрес массива
; CX - количество элементов
; Выход:
; AX - количество нулевых элементов
count_zeros    proc far
        ; Сохраняем используемые регистры
        push    bx
        push    cx
        push    dx

        xor     ax, ax           ; Обнуляем AX, который будет счетчиком нулей

loop_start:
        mov     dx, [bx]         ; Загружаем текущий элемент массива из адреса BX
        cmp     dx, 0            ; Сравниваем загруженный элемент с 0
        jne     next_element     ; Если элемент не равен 0, переходим к next_element
        inc     ax               ; Если элемент равен 0, увеличиваем счетчик в AX

next_element:
        add     bx, 2            ; Переход к следующему элементу массива (слово = 2 байта)
        loop    loop_start       ; Уменьшаем CX, если CX ≠ 0, переходим к началу цикла

        pop     dx
        pop     cx
        pop     bx
        iret                     ; Возвращаем управление, восстанавливая PSW, CS, IP
count_zeros    endp

code    ends
        end     main
