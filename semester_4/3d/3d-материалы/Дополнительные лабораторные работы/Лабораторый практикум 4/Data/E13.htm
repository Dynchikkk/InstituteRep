<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Программное обеспечение систем компьютерной графики</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<style type="text/css">
<!--
body {
	background-image: url(Fon.jpg);
}
.style1 {
	color: #009900;
	font-weight: bold;
	font-style: italic;
}
-->
</style>
</head>
<body>
<h2 align="center" class="style1">Программное обеспечение систем компьютерной графики</h2>
<p align="justify">Использование программистами графических возможностей видеосистемы может осуществляться различно. Для гибкости управления доступ к этим средствам может осуществляться на <strong>физическом уровне</strong>, <strong>на уровне </strong><strong>базовой системой ввода-вывода </strong> (<strong>BIOS</strong>), <strong>на уровне операционной системы, на уровне специализированных графических интерфейсов </strong>. </p>
<p align="justify"><strong>Физический уровень </strong> предоставляет программисту возможность прямого доступа к аппаратной части видеосистемы через специальные регистры (порты). Производительность программы при использовании данного уровня достигает максимума. Однако, программирование на физическом уровне достаточно сложная процедура, т.к. требует глубоких знаний функционирования аппаратных средств. Кроме того, программное обеспечение, написанное на низком уровне, является плохо переносимым или не переносимым вовсе. Особенно это касается видеоадаптера SVGA . </p>
<p align="justify">Некоторые операции с видеосистемой, такие как определение графического видеорежима, вывод пиксела на экран и неко торые другие, поддерживаются <strong>базовой системой ввода-вывода </strong> ( <strong>BIOS </strong>). Базовое программное обеспечение видеосистемы (подобласть BIOS ) также выполнено в виде процедур, записанных в постоянное запоминающее устройство, и получило название видео BIOS (или процедуры видеодрайвера BIOS ). Такой уровень расширяет функции взаимодействия программы с видеосистемой, обеспечивая хорошую переносимость и скорость работы программного обеспечения. </p>
<p align="justify">Наиболее высокий уровень программирования обеспечивает <strong>использование функ ций операционной системы </strong> ( <strong>ОС </strong>). В состав ОС входят специальные утилиты – драйверы внешних устройств, которые предназначены для управления соответствующим устройством, в том числе и видеоадаптером, на аппаратном уровне. Обычно драйверы видеоадаптеров разрабатываются самой фирмой, создавшей видеоадаптер (реже фирмой-производителем ОС). Поэтому работа с регистрами скрыта от программистов, разрабатывающих программы под ОС Windos или MS - DOS . </p>
<p align="justify">Функции ОС, обращающиеся к видеосистеме ПК, образуют графический интерфейс операционной системы. Данные функции позволяют выполнять достаточно сложные графические преобразования изображения, работать со сложными графическими объектами, полностью абстрагируясь от аппаратной части видеосистемы. Программное обеспечение, использующее вызовы функций ОС, является наиболее мобильным. Оно может работать на любых ПК, где установлена аналогичная операционная система. </p>
<p align="justify">Различные операционные системы могут пре доставлять различные возможности. Например, в MS - DOS графических функций почти не было, однако программисту был разрешен свободный дос туп ко всем аппаратным ресурсам компьютера. В быстродействующих графических программах часто использовался непосредственный доступ к ви деопамяти. </p>
<p align="justify">В отличие от этого, операционная система Windows запрещает прикладным программам непосредственный доступ к аппаратным ресурсам, однако можно применять несколько сотен графических функций операцион ной системы - интерфейс API ( Application Program Interface – интерфейс прикладных программ). </p>
<p align="justify">Наконец, можно использовать <strong>специализи рованные графические интерфейсы </strong>, которые поддерживают аппаратные возможности современных графических процессоров. </p>
<p align="justify">Одним из наиболее известных графических интерфейсов является уже упоминавшаяся библиотека OpenGL . Этот интерфейс в виде библиотеки графических функций был разработан Silicon Graphics , и поддерживается многими операционными системами (в том числе Windows ), а также производителями графических акселераторов. Интерфейс OpenGL для графического отображения использует взаимодействие типа клиент-сервер [25, 61]. </p>
<p align="justify">Другим известным графическим интерфейсом является DirectX с подсистемой трехмерной графики Direct 3 D, а также подсистемой Direct Draw , которая обеспечивает, в частности, непосредственный доступ к видеопамяти. Этот интерфейс разработан Microsoft и предназначен только для Windows [26]. </p>
<p align="justify">Известны также другие разработки графических интерфейсов для видеоадап теров. Например, интерфейс GLide, разработанный 3 Dfx для графических видеоадаптеров семейства Voodoo (впрочем, это уже история, поскольку фирма 3 Dfx недавно прекратила свое существование как изготовитель видео адаптеров). </p>
<p align="justify">Фактически любая графическая операция сводится к работе с отдельными пикселями - поставить точку заданного цвета и определить цвет заданной точки. Однако большинство графических библиотек и интерактивных графических систем поддерживает работу и с более сложными объектами, поскольку работа только на уровне отдельно взятых пикселей была бы очень затруднительной и неэффективной для программистов и конечных пользователей. Эти объекты образуют набор базовых графических элементов – <strong>примитивов. </strong> Слово примитив происходит от лат. <strong><em>Primitivus </em></strong> - самый ранний, начальный, первый, простейший). </p>
<p align="justify">Набор примитивов можно разделить на следующие основные группы: </p>
<ul>
  <li> линейные изображения (растровые образы линий); </li>
  <li> сплошные объекты (растровые образы двумерных областей); </li>
  <li> шрифты; </li>
  <li> изображения (прямоугольные матрицы пикселов). </li>
</ul>
<p align="justify">К графическим примитивам относятся следующие объекты: линия, эллипс, окружность, дуга, текст, полигональная область. Графические примитивы могут выводиться с соблюдением некоторых условий, которые задаются атрибутами. Атрибутами графических примитивов являются цвет, тип линии, вид заполнения, вид штриховки и т.п. Иногда могут быть определены и более сложные условия при сложных преобразованиях координат, при размещении в пространстве - в аксонометрических и перспективных проекциях и т.д. Например, отрезок может быть частично видимым или невидим полностью. </p>
<p align="justify">В некоторых системах набор примитивов небольшой, в некоторых – достаточно обширный, включающий трехмерные примитивы, которые обладают свойствами реалистичности.</p>

</body>
</html>
