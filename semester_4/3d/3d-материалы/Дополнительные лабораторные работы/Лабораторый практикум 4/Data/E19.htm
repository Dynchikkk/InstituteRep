<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Векторная полигональная модель</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<style type="text/css">
<!--
body {
	background-image: url(Fon.jpg);
}
.style1 {
	color: #009900;
	font-weight: bold;
	font-style: italic;
}
-->
</style>
</head>
<body>
<h2 align="center" class="style1"> Векторная полигональная модель</h2>
<p align="justify">Для описания пространственных объектов в этой модели используются такие элементы: </p>
<ul>
  <li> вершины; </li>
  <li> отрезки прямых (векторы); </li>
  <li> полилинии, полигоны; </li>
  <li> полигональные поверхности. </li>
</ul>
<p align="justify">Элемент &quot;вершина&quot; (vertex) — главный элемент описания, все другие являю тся производными. При использовании трехмерной декартовой системы координаты вершин определяются как (<strong><em>х, у, </em></strong><strong><em>z</em></strong>). Каждый объект однозначно определяется координатами собственных вершин. </p>
<p align="justify">Вершина может моделировать отдельный точечный объект, размер которого не имеет значения, а также может использоваться в качестве конечных точек для линейных объектов и полигонов. Двумя вершинами задается вектор. Несколько векторов составляют полилинию. Полилиния может моделировать отдельный линейный объект, толщина которого не учитывается, а также может представлять контур полигона. Полигон моделирует площадный объект. Один полигон может описывать плоскую грань объемного объекта. Несколь ко граней составляют объемный объект в виде полигональной поверхно сти — многогранник или незамкнутую поверхность (в литературе часто употребляется название &quot;полигональная сетка&quot;). </p>
<p align="justify">Векторную полигональную модель можно считать наиболее распространенной в современных системах трехмерной компьютерной графики. Ее используют в системах ав томатизированного проектирования, в компьютерных играх и тренажерах, в САПР, геоинформационных системах и тому подобное. </p>
<p align="justify">Рассмотрим структуры данных, которые используются в векторной полигональ ной модели. </p>
<p align="justify"><strong>Первый способ</strong>. Сохраняем все грани в отдельности. В компьютерной программе такой способ описания объекта можно реализо вать разнообразно. Например, для каждой грани открыть в памяти отдельный м ассив. Можно все грани записывать в один массив-вектор. А можно исполь зовать классы (например, в языке C++) как для описания отдельных граней, так и объе ктов в целом. Можно создавать структуры, которые объединяют тройки (<strong><em>x </em></strong><strong><em>, у, </em></strong><strong><em>z</em></strong>), или сохранять координаты отдельно. В значительной мере это отно сится уже к компетенции программиста, зависит от его вкуса. Принципиаль но это мало что изменяет — так или иначе в памяти необходимо сохранять к оординаты вершин граней плюс некоторую информацию в качестве наклад ных затрат. </p>
<p align="justify"><strong>Второй способ описания </strong>. Для такого варианта координаты вершин сохраняются без по второв. Вершины пронумерованы, а каждая грань дается в виде списка индексов вер шин (указателей на вершины). </p>
<p align="justify"><strong>Третий способ </strong>описания. Этот способ (в литературе его иногда называют <em>линейно-узловой моделью) </em>основывается на иерархии: вершины- ребра-грани. </p>
<p align="justify">Сравним эти три разновидности векторной полигональной модели, учитывая различные аспекты. </p>
<p align="justify"><strong>Скорость вывода полигонов </strong>. Если для полигонов необходимо рисовать ли нию контура и точки заполнения, то первый и второй варианты близки по быстродействию — и контуры, и заполнения рисуются одинаково. Отличия в том, что для второго варианта сначала надо выбирать индекс вершины, что замедляет процесс вывода. В обоих случаях для смежных граней повторно рисуется общая часть контура. Для третьего варианта можно предусмотреть более совершенный способ рисования контура — каждая линия будет рисоваться только один раз, если в массивах описания ребер предусмотреть бит означающий, что это ребро уже нарисовано. Это обуславливает преимущест ва третьего варианта по быстродействию. </p>
<p align="justify">Блокирование повторного рисования линий контуров смежных граней позво ляет решить также проблему искажения стиля линий, если линии контуров не сплошные, а, например, пунктирные. </p>
<p align="justify"><strong>Топологический аспект. </strong>Представим, что имеется несколько смежных гра ней. Что будет, если изменить координаты одной вершины в структурах дан ных? Поскольку для второго и третьего вариантов каждая вершина сохраняется в одном экземпляре, то изменение ее координат автоматически приводит к из менению всех граней, в описании которых сохраняется индекс этой верши ны. Это полезно, например, в геоинформационных системах при описании соседних земельных участков или других смежных объектов. Следует заметить, что подобного результата можно достичь и при структуре данных, соответствующей первому варианту. Можно предусмотреть поиск других вершин, координаты которых совпадают с координатами точки <em>А. </em>Иначе говоря, поддержка такой операции может быть обеспечена как структурами данных, так и алгоритмически. </p>
<p align="justify">Однако когда нужно разъединить смежные грани, то для второго и третьего вариантов это сложнее, чем для первого — необходимо записать в массивы новую вершину, новые ребра и определить индексы в массивах граней. При разработке новой графической системы обычно приходится решать такой вопрос: какие операции реализовывать только алгоритмически, а какие о беспечивать структурами данных? Ответ на это можно дать, проанализиро вав много других факторов. </p>
<p align="justify">Положительные черты векторной полигональной модели: </p>

  <ul>
    <li>      
      <div align="justify"><strong>удобство масштабирования объектов </strong>. При увеличении или уменьшении объекты выглядят более качественно, чем при растровых моделях описания. Диапазон масштабирования определяется точностью аппроксимации и разрядностью чисел для представления координат вершин; </div>
    </li>
  


  <li> 
    <div align="justify"><strong>небольшой объем данных </strong> для описания простых поверхностей, которые адекватно аппроксимируются плоскими гранями; </div>
  </li>
  <li> 
    <div align="justify"><strong>необходимость вычислять только координаты вершин </strong> при преобразованиях систем координат или перемещении объектов; </div>
  </li>
  <li> 
    <div align="justify"><strong>аппаратная поддержка </strong> многих операций в современных графических видеосистемах, которая обуславливает достаточную скорость для анимации. </div>
  </li>
</ul>
<p align="justify">Недостатки полигональной модели: </p>
<ul>
  <li>
    <div align="justify"> сложные алгоритмы визуализации для создания реалистичных изображе ний; </div>
  </li>
  <li>
    <div align="justify"> сложные алгоритмы выполнения топологических операций, таких, например, как разрезы; </div>
  </li>
  <li>
    <div align="justify">аппроксимация плоскими гранями приводит к погрешности моделирова ния. При моделировании поверхностей, которые имеют сложную фрактальную форму, обычно невозможно увеличивать количество граней из-за ограничений по быстродействию и объему памяти компьютера.</div>
  </li>
</ul>

</body>
</html>
