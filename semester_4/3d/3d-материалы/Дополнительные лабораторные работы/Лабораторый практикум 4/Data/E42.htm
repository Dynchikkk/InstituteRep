<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Оптимизация алгоритмов удаления невидимых линий и поверхностей</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<style type="text/css">
<!--
body {
	background-image: url(Fon.jpg);
}
.style1 {
	color: #009900;
	font-weight: bold;
	font-style: italic;
}
-->
</style>
</head>
<body>
<h2 align="center" class="style1">Оптимизация алгоритмов удаления невидимых линий и поверхностей</h2>
<p align="justify">В качестве методов оптимизации алгоритмы удаления невидимых линий и поверхностей применяются: </p>
<ul>
  <li> методы сортировки; </li>
  <li> методы отсечения нелицевых граней; </li>
  <li> методы, использующие ограничивающие тела; </li>
  <li> методы разбиения пространства (плоскости). </li>
</ul>
<p align="justify">Повышения быстродействия методов удаления нелицевых линий и поверхностей обеспечивает применение иерархических структур данных и эффективная реализация операций над структурами данных. </p>
<p align="justify"><strong>Методы сортировки. </strong>Большинство алгоритмов удаления невидимых граней и поверхностей тесно связаны с различными методами сортировки. Некоторые алгоритмы проводят сортировку явно, в некоторых она присутствует в скрытом виде. Приближенные методы отличаются друг от друга фактически только порядком и способом проведения сортировки. </p>
<p align="justify">Главная сортировка ведется по геометрическому расстоянию от тела, поверхности, ребра или точки до точки наблюдения (по глубине). Основная идея сортировки заключается в том, что чем дальше расположен объект от точки наблюдения, тем больше вероятность того, что он будет полностью или частично заслонен одним из объектов, более близким к точке наблюдения. Сортировка “по глубине” (по расстоянию от точки наблюдения до объекта сцены) позволяет при анализе для каждого из объектов сцены, исключить из рассмотрения те тела, которые расположены дальше от точки наблюдения, чем данное тело. </p>
<p align="justify">После определения расстояний или приоритетов по глубине остается провести сортировку по горизонтали и по вертикали, чтобы выяснить, будет ли рассматриваемый объект действительно заслонен объектом, расположенным ближе к точке наблюдения. </p>
<p align="justify"><strong>Метод отсечения нелицевых граней. </strong>Рассмотрим тело, представленное выпуклым многогранником, для каждой грани которого задан единичный вектор внешней нормали. Если вектор нормали грани <strong><em>n </em></strong> составляет с вектором <strong><em>l </em></strong> ,задающим направление проектирования, тупой угол (вектор нормали направлен от наблюдателя), то эта грань заведомо не может быть видима. Такие грани называются нелицевыми. Если угол является острым, грань называется лицевой. </p>
<p align="justify">При параллельной проекции условие на угол можно записать в виде неравенства <strong><em>(</em></strong><strong><em>n, </em></strong><strong><em>l) </em></strong><strong><em><img src="im4%20(00).gif" width="14" height="15" align="middle"> 0 </em></strong>, поскольку направление проецирования от грани не зависит. </p>
<p align="justify">При центральной проекции с центром в точке <strong><em>с, </em></strong> вектор проецирования для точки <strong><em>p </em></strong> будет равен <strong><em>l = </em></strong><strong><em>c - </em></strong><strong><em>p</em></strong>. Для определения того, является заданная грань лицевой или нет, достаточно взять произвольную точку <strong><em>p </em></strong> этой грани и проверить выполнения условия <strong><em>( </em></strong><strong><em>n , </em></strong><strong><em>l ) </em></strong><strong><em><img src="im4%20(00).gif" width="14" height="15" align="middle">  0</em></strong>. </p>
<p align="justify">Знак данного скалярного произведения не зависит от выбора точки на грани, а определяется тем, в каком полупространстве относительно плоскости, содержащую данную грань лежит центр проецирования. </p>
<p align="justify">Предложенный подход позволяет примерно вдвое сократить количество рассматриваемых граней. Ребра между нелицевыми гранями также всегда не видны. Однако, ребро между лицевой и нелицевой гранями может быть и видимо. </p>
<p align="justify">Так как при центральном проецировании проецирующий луч зависит от грани (и не зависит от выбора точки на грани), то лицевая грань может стать нелицевой, а нелицевая лицевой, даже при параллельном сдвиге. При параллельном проецировании сдвиг не изменяет углов и то, является ли грань лицевой или нет, зависит только от угла между нормалью к грани и направлению проецирования. </p>
<p align="justify">В случае если сцена представляет собой один выпуклый многогранник или объекты в сцене не перекрывают друг друга по габаритам, то удаление нелицевых граней полностью решает задачу удаления невидимых граней. </p>
<p align="justify"><strong>Метод ограничивающих тел. </strong>Вокруг каждого объекта описывается тело достаточно простого вида. Если эти тела не пересекаются, то и содержащиеся в них объекты, тоже не пересекаются. Следует, однако, иметь в виду, что если описанные тела пересекаются, то содержащиеся внутри них объекты могут не пересекаться. </p>
<p align="justify">В качестве ограничивающих тел чаще всего используются прямоугольные параллелепипеды с ребрами, параллельными координатным осям. Тогда ограничивающее тело (в данном случае его называют bounding box ) описывается шестью числам: </p>
<p align="center"><strong><em>(</em></strong><strong><em>x<sub>min </sub>, </em></strong><strong><em>y<sub>min </sub>, </em></strong><strong><em>z<sub>min </sub>) и ( </em></strong><strong><em>x<sub>max </sub>, </em></strong><strong><em>y<sub>max </sub>, </em></strong><strong><em>z<sub>max </sub>)</em></strong>, </p>
<p align="justify">где первая тройка чисел задает одну вершину параллелепипеда, а вторая - противоположную. Сами числа представляют собой покоординатные значения минимума и максимума из координат точек исходного объекта. </p>
<p align="justify">Проверка на пересечение двух тел сводится просто к проверкам на пересечение промежутков <strong><em>[ </em></strong><strong><em>x<sub>min</sub> , </em></strong><strong><em>x<sub>max</sub> ], [ </em></strong><strong><em>y<sub>min</sub> , </em></strong><strong><em>y<sub>max</sub> ] , [ </em></strong><strong><em>z<sub>min</sub> , </em></strong><strong><em>z<sub>max</sub> ] </em></strong>одного тела с соответствующими промежутками другого. В случае, если пересечение хотя бы одной пары промежутков пусто, то тела и содержащиеся в них объекты не пересекаются. </p>
<p align="justify">Ограничивающиеся тела можно строить для проекций объектов, причем в случае параллельного проецирования вдоль оси <strong><em>Oz </em></strong> ограничивающим телом для проекции будет прямоугольник, получающийся из ограничивающего тела для самого объекта отбрасыванием <strong><em>z </em></strong>-компоненты. </p>
<p align="justify">В алгоритмах удаления невидимых линий и граней могут использоваться и другие типы ограничивающих тел. Подробнее об этом можно узнать в []. </p>
<p align="justify">Ограничивающие тела можно строить не только вокруг отдельных граней, но и вокруг наборов граней и сложных составных объектов, что позволяет несложно отображать целые группы граней и объектов. При этом могут возникнуть иерархические структуры ограничивающих тел. </p>
<p align="justify"><strong>Метод разбиения пространства (плоскости). </strong>Данный метод облегчает сравнение объектов друг с другом и позволяет использовать когерентность (от англ. <em>coherence </em> - связанность) как в пространстве, так и на картинной плоскости. </p>
<p align="justify">Вообще выделяют несколько типов когерентности: </p>
<ul>
  <li> 
    <div align="justify"><strong>когерентность в картинной плоскости </strong> – если данный пиксел соответствует точке <strong><em>P </em></strong> некоторой грани, то соседние пикселы скорее всего соответствуют точкам той же грани; </div>
  </li>
  <li> 
    <div align="justify"><strong>когерентность в пространстве объектов </strong> – если данный объект (грань) видим (невидим), то расположенный рядом объект (грань) скорее всего является видимым (невидимым); </div>
  </li>
  <li> 
    <div align="justify"><strong>в случае анимации возникает третий тип когерентности </strong> – временная. Если грани видимы в данном кадре, то, скорее всего, они будут видимы и в следующем. </div>
  </li>
</ul>
<p align="justify">Аккуратное использование когерентности позволяет заметно сократить количество возникающих проверок и заметно повысить быстродействие алгоритма. </p>
<p align="justify">В методе разбиения пространства пространство разбивается на клетки и для каждой клетки составляется список всех объектов (граней), которые ее пересекают. Простейшим разбиением пространства является равномерное разбиение пространства на набор равных прямоугольных клеток. Для отыскания всех объектов, которые закрывают рассматриваемый объект, определяются объекты, попадающие в те же клетки картинной плоскости, что и данный объект. И на закрытие проверяются только они. </p>
<p align="justify">Для сцен с неравномерным распределением объектов имеет смысл использовать неравномерное (адаптивное) разбиение пространства или плоскости. </p>
<p align="justify"><strong>Иерархические структуры. </strong>При работе с большими объемами данных полезными могут оказаться различные древовидные (иерархические) структуры. </p>
<p align="justify">Одной из простых структур является иерархия ограничивающих тел. Сначала ограничивающие тела описываются вокруг всех объектов. На следующем шаге объекты разбиваются на подгруппы, вокруг каждой из них строится ограничивающее тело и т.д. В результате получается дерево, корнем которого является тело, описанное вокруг всей сцены. Тела, построенные вокруг первичных групп, образуют первичных потомков, вокруг вторичных – вторичных потомков и т.д. </p>
<p align="justify">Сравнение объектов начинается с корня. Если сравнение не дает положительного результата, то все тела можно сразу отбросить. В противном случае проверяются все его прямые потомки. При этом уже на ранней стадии проверок происходит отсечение достаточно большого числа объектов. </p>
<p align="justify">Иерархические структуры можно строить и на основе разбиения пространства (картинной плоскости): каждая клетка исходного разбиения разбивается на части. При этом каждая клетка соответствует узлу дерева. </p>
<p align="justify">Иерархии позволяют легко и просто производить частичное упорядочивание граней, отсечение граней, не удовлетворяющим каким либо условиям.</p>

</body>
</html>
