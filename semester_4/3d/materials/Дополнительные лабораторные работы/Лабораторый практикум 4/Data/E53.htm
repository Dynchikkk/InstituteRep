<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Пример программы</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<style type="text/css">
<!--
body {
	background-image: url(Fon.jpg);
}
.style1 {
	color: #009900;
	font-weight: bold;
	font-style: italic;
}
-->
</style>
</head>
<body>
<h2 align="center" class="style1">Пример программы</h2>
<blockquote>
  <p align="justify"><em> Program Rotate_Piramide;  <br>
    { Демонстрация композиции тpехмерных аффинных преобразований }  <br>
    { на примере перемещения и вращения пиpамиды }  <br>
    { Моделирование объекта и аффинные преобразования }  <br>
    { задаются в матричном виде в однородных координатах }  <br>
    { Пpоекция - оpтогpафическая: наблюдатель находится }  <br>
    { в бесконечности на положительном напpавлении оси z }  <br>
    Uses Crt, Graph;  <br>
    Const  <br>
    { размер матрицы фигуры }  <br>
    l = 5; { количество точек }  <br>
    n = 4; { количество координат }  <br>
    alpha = 10/180; { угол поворота в радианах }  <br>
    { перемещение по координате X, Y и Z }  <br>
    Dx = 2.87;  <br>
    Dy = 0.5;  <br>
    Dz = 0.5;  <br>
    Type  <br>
    { тип матрицы объекта в однородных мировых координатах }  <br>
    TKoord_World = array[1..l, 1..n] of real;  <br>
    { тип матрицы аффинного преобразования в однородных координатах }  <br>
    TMatrix = array[1..n, 1..n] of real;  <br>
    Const  <br>
    { мировые однородные координаты объекта }  <br>
    K_W : TKoord_World = ((100, 100, 0, 1),  <br>
    (200, 100, 0, 1),  <br>
    (200, 50, 100, 1),  <br>
    (100, 50, 100, 1),  <br>
    (150, 200, 50, 1)  <br>
    );  <br>
    { определение матрицы перемещения }  <br>
    M_Trans : TMatrix = ((1, 0, 0, 0),  <br>
    (0, 1, 0, 0),  <br>
    (0, 0, 1, 0),  <br>
    (Dx, Dy, Dz, 1)  <br>
    );  <br>
    { размеры двухмерной области видимости }  <br>
    { в мировых координатах }  <br>
    Xw_max = 700.55;  <br>
    Yw_max = 500.7;  <br>
    Var  <br>
    { матрица поворота в однородных координатах }  <br>
    M_Rotate : TMatrix;  <br>
    { координаты центра поворота }  <br>
    x0, y0, z0 : real;  <br>
    { коэффициенты преобразования мировых координат в экранные }  <br>
    hx, hy : real;  <br>
    { переменные для инициализации графического режима }  <br>
    grDriver, grMode : integer;  <br>
    ErrCode : byte;  <br>
    { Процедура умножения матриц }  <br>
    procedure MultMatrix(f:TKoord_World; { исходная матрица объекта }  <br>
    m:TMatrix; { матрица аффинного преобразования }  <br>
    Var r:TKoord_World);{ результирующая матрица объекта }  <br>
    var  <br>
    i,j,k : byte;  <br>
    t : TKoord_World;  <br>
    begin  <br>
    for i := 1 to l do  <br>
    for j := 1 to n do  <br>
    begin  <br>
    t[i,j] := 0;  <br>
    for k := 1 to n do  <br>
    t[i,j] := t[i,j] + f[i,k]*m[k,j];  <br>
    end;  <br>
    r := t;  <br>
    end;  <br>
    { функции преобразования мировых координат в экранные }  <br>
    { преобразование координаты X }  <br>
    function IX(x : real; hx : real) : integer;  <br>
    begin  <br>
    IX := Round(x*hx);  <br>
    end;  <br>
    { преобразование координаты Y }  <br>
    function IY(y : real; hy : real) : integer;  <br>
    begin  <br>
    IY := GetMaxY - Round(y*hy);  <br>
    end;  <br>
    Begin  <br>
    { Инициализация графического режима }  <br>
    grDriver := Detect;  <br>
    InitGraph(grDriver, grMode, '');  <br>
    ErrCode := GraphResult;  <br>
    if ErrCode = grOk then  <br>
    begin  <br>
    { Вычисление коэффициентов преобразования координат }  <br>
    hx := GetmaxX/Xw_max;  <br>
    hy := GetmaxY/Yw_max;  <br>
    { Определение матрицы поворота }  <br>
    { Определяются все элементы матрицы }  <br>
    { Кроме элементов последней строки }  <br>
    { Элементы последеней строки формируются с учетом }  <br>
    { координат пpямой, вокpуг котоpой осуществляется поворот }  <br>
    M_Rotate[1,1] := Cos(alpha);  <br>
    M_Rotate[1,2] := 0;  <br>
    M_Rotate[1,3] := -Sin(alpha);  <br>
    M_Rotate[1,4] := 0;  <br>
    M_Rotate[2,1] := 0;  <br>
    M_Rotate[2,2] := 1;  <br>
    M_Rotate[2,3] := 0;  <br>
    M_Rotate[2,4] := 0;  <br>
    M_Rotate[3,1] := Sin(alpha);  <br>
    M_Rotate[3,2] := 0;  <br>
    M_Rotate[3,3] := Cos(alpha);  <br>
    M_Rotate[3,4] := 0;  <br>
    M_Rotate[4,2] := 0;  <br>
    M_Rotate[4,4] := 1;  <br>
    { Вычисление координат точки, чеpез котоpую пpоходит пpямая, }  <br>
    { вокpуг котоpой осуществляется повоpот }  <br>
    { в качестве такой точки выбирается одна из веpшин пиpамиды }  <br>
    x0 := K_W[5,1]; { X }  <br>
    y0 := K_W[5,2]; { Y }  <br>
    z0 := K_W[5,3]; { Z }  <br>
    { Задание типа линии }  <br>
    setlinestyle(SolidLn, 0, 3);  <br>
    { Вывод текста }  <br>
    settextstyle(gothicFont, Horizdir, 3);  <br>
    setcolor(Yellow);  <br>
    OutTextXY(25, getmaxy - 40, ' Example 3-D Rotate&amp;Transform'); <br>
    repeat  <br>
    { Отображение пи p амиды }  <br>
    SetColor(Red);  <br>
    Line(IX(K_W[1,1],hx),IY(K_W[1,2],hy),IX(K_W[2,1],hx),IY(K_W[2,2],hy));  <br>
    Line(IX(K_W[2,1],hx),IY(K_W[2,2],hy),IX(K_W[3,1],hx),IY(K_W[3,2],hy));  <br>
    Line(IX(K_W[3,1],hx),IY(K_W[3,2],hy),IX(K_W[4,1],hx),IY(K_W[4,2],hy));  <br>
    Line(IX(K_W[4,1],hx),IY(K_W[4,2],hy),IX(K_W[1,1],hx),IY(K_W[1,2],hy));  <br>
    Line(IX(K_W[1,1],hx),IY(K_W[1,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    Line(IX(K_W[2,1],hx),IY(K_W[2,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    Line(IX(K_W[3,1],hx),IY(K_W[3,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    Line(IX(K_W[4,1],hx),IY(K_W[4,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    Delay(1500);  <br>
    { Стирание пи p амиды }  <br>
    { От p исовка p ебе p пи p амиды цветом фона }  <br>
    SetColor(GetBkColor);  <br>
    Line(IX(K_W[1,1],hx),IY(K_W[1,2],hy),IX(K_W[2,1],hx),IY(K_W[2,2],hy));  <br>
    Line(IX(K_W[2,1],hx),IY(K_W[2,2],hy),IX(K_W[3,1],hx),IY(K_W[3,2],hy));  <br>
    Line(IX(K_W[3,1],hx),IY(K_W[3,2],hy),IX(K_W[4,1],hx),IY(K_W[4,2],hy));  <br>
    Line(IX(K_W[4,1],hx),IY(K_W[4,2],hy),IX(K_W[1,1],hx),IY(K_W[1,2],hy));  <br>
    Line(IX(K_W[1,1],hx),IY(K_W[1,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    Line(IX(K_W[2,1],hx),IY(K_W[2,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    Line(IX(K_W[3,1],hx),IY(K_W[3,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    Line(IX(K_W[4,1],hx),IY(K_W[4,2],hy),IX(K_W[5,1],hx),IY(K_W[5,2],hy));  <br>
    { Применение операции перемещения фигуры }  <br>
    { реализуется умножением матрицы фигуры }  <br>
    { на матрицу перемещения }  <br>
    MultMatrix(K_W, M_Trans, K_W);  <br>
    { Вычисление координат точки, чеpез котоpую пpоходит пpямая, }  <br>
    { вокpуг котоpой осуществляется повоpот }  <br>
    { в качестве такой точки выбирается одна из веpшин пиpамиды }  <br>
    x0 := K_W[5,1]; { X }  <br>
    y0 := K_W[5,2]; { Y }  <br>
    z0 := K_W[5,3]; { Z }  <br>
    { Определение элементов последеней строки }  <br>
    { матрицы поворота, исходя из координат точки,  <br>
    { чеpез котоpую пpоходит ось поворота }  <br>
    M_Rotate[4,1] := x0-x0*Cos(alpha)-z0*Sin(alpha);  <br>
    M_Rotate[4,3] := z0+x0*Sin(alpha)-z0*Cos(alpha);  <br>
    { Применение операции поворота фигуры }  <br>
    { реализуется умножением матрицы фигуры }  <br>
    { на матрицу поворота }  <br>
    MultMatrix(K_W, M_Rotate, K_W);  <br>
    until KeyPressed;  <br>
    CloseGraph;  <br>
    end  <br>
    else Writeln('Graphics error:', GraphErrorMsg(ErrCode));  <br>
    End.  <br>
    { Init Graph Regime }  <br>
    grDriver := Detect;  <br>
    InitGraph(grDriver, grMode, 'c:\tpascal.71\bgi');  <br>
    ErrCode := GraphResult;  <br>
    if ErrCode = grOk then  <br>
    begin  <br>
    { Max koord World }  <br>
    Xw_max := 700;  <br>
    Yw_max := 500;  <br>
    { Max koord Screen }  <br>
    Xs_max := GetmaxX;  <br>
    Ys_max := GetmaxY;  <br>
    { Koeff Change Koord World--&gt;Screen } <br>
    hx := Xs_max/Xw_max;  <br>
    hy := Ys_max/Yw_max;  <br>
    repeat  <br>
    { Change Koord World--&gt;Screen } <br>
    Koord_Screen[1,1] := Round(Koord_World[1,1]*hx);  <br>
    Koord_Screen[1,2] := Ys_max - Round(Koord_World[1,2]*hy);  <br>
    Koord_Screen[2,1] := Round(Koord_World[2,1]*hx);  <br>
    Koord_Screen[2,2] := Ys_max - Round(Koord_World[2,2]*hy);  <br>
    Koord_Screen[3,1] := Round(Koord_World[3,1]*hx);  <br>
    Koord_Screen[3,2] := Ys_max - Round(Koord_World[3,2]*hy);  <br>
    Koord_Screen[4,1] := Round(Koord_World[4,1]*hx);  <br>
    Koord_Screen[4,2] := Ys_max - Round(Koord_World[4,2]*hy);  <br>
    Koord_Screen[5,1] := Round(Koord_World[5,1]*hx);  <br>
    Koord_Screen[5,2] := Ys_max - Round(Koord_World[5,2]*hy);  <br>
    { Show Line }  <br>
    SetColor(Red);  <br>
    Line(Koord_Screen[1,1],Koord_Screen[1,2],Koord_Screen[2,1],Koord_Screen[2,2]);  <br>
    Line(Koord_Screen[2,1],Koord_Screen[2,2],Koord_Screen[3,1],Koord_Screen[3,2]);  <br>
    Line(Koord_Screen[3,1],Koord_Screen[3,2],Koord_Screen[4,1],Koord_Screen[4,2]);  <br>
    Line(Koord_Screen[4,1],Koord_Screen[4,2],Koord_Screen[1,1],Koord_Screen[1,2]);  <br>
    Line(Koord_Screen[1,1],Koord_Screen[1,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    Line(Koord_Screen[2,1],Koord_Screen[2,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    Line(Koord_Screen[3,1],Koord_Screen[3,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    Line(Koord_Screen[4,1],Koord_Screen[4,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    Delay(2500);  <br>
    { Rotate }  <br>
    Rotate(Koord_World, Matrix, Koord_World);  <br>
    SetColor(GetBkColor);  <br>
    Line(Koord_Screen[1,1],Koord_Screen[1,2],Koord_Screen[2,1],Koord_Screen[2,2]);  <br>
    Line(Koord_Screen[2,1],Koord_Screen[2,2],Koord_Screen[3,1],Koord_Screen[3,2]);  <br>
    Line(Koord_Screen[3,1],Koord_Screen[3,2],Koord_Screen[4,1],Koord_Screen[4,2]);  <br>
    Line(Koord_Screen[4,1],Koord_Screen[4,2],Koord_Screen[1,1],Koord_Screen[1,2]);  <br>
    Line(Koord_Screen[1,1],Koord_Screen[1,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    Line(Koord_Screen[2,1],Koord_Screen[2,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    Line(Koord_Screen[3,1],Koord_Screen[3,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    Line(Koord_Screen[4,1],Koord_Screen[4,2],Koord_Screen[5,1],Koord_Screen[5,2]);  <br>
    until KeyPressed;  <br>
    CloseGraph;  <br>
    end  <br>
    else Writeln('Graphics error:', GraphErrorMsg(ErrCode));  <br>
    End. <br>
  </em></p>
</blockquote>

</body>
</html>
